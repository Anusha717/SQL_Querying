SELECT * FROM patients
Q) Show first name, last name, and gender of patients whose gender is 'M'
SELECT
  first_name,
  last_name,
  gender
FROM patients
WHERE gender = 'M';

Q)Show first name and last name of patients who does not have allergies. (null)
SELECT
  first_name,
  last_name
FROM patients
WHERE allergies IS NULL;

Q) Show first name and last name of patients weight within range of 100 to 120

SELECT
  first_name,
  last_name
FROM patients
WHERE weight between 100 and 120

Q) Show first name of patients that start with the letter 'C'
select
  first_name 
from patients 
where first_name like 'C%'

Q)Update the patients table for the allergies column. If the patient's allergies is null then replace it with 'NKA'
UPDATE patients
SET allergies = 'NKA'
WHERE allergies IS NULL;

Q)Show first name and last name concatinated into one column to show their full name.
SELECT
  CONCAT(first_name, ' ', last_name) AS full_name
FROM patients;

SELECT first_name || ' ' || last_name
FROM patients;

Q) Show first name, last name, and the full province name of each patient.
SELECT
  first_name,
  last_name,
  province_name
FROM patients
  JOIN province_names ON province_names.province_id = patients.province_id;

Q)Show how many patients have a birth_date with 2010 as the birth year.

select count(patient_id) from patients where year(birth_date)=2010

SELECT COUNT(*) AS total_patients
FROM patients
WHERE YEAR(birth_date) = 2010;

SELECT count(first_name) AS total_patients
FROM patients
WHERE
  birth_date >= '2010-01-01'
  AND birth_date <= '2010-12-31'


Q) Show the first_name, last_name, and height of the patient with the greatest height.
select first_name,last_name,height from patients order by height desc limit 1

SELECT
  first_name,
  last_name,
  height
FROM patients
WHERE height = (
    SELECT max(height)
    FROM patients
  )

SELECT
  first_name,
  last_name,
  MAX(height) AS height
FROM patients;


Q) Show all columns for patients who have one of the following patient_ids: 1,45,534,879,1000
SELECT *
FROM patients
WHERE
  patient_id IN (1, 45, 534, 879, 1000);



-------------------------------
select * from admissions where admission_date = discharge_date
select patient_id,count(admission_date) from admissions where patient_id=579
select distinct city  from patients where province_id ='NS'

select first_name,last_name,birth_date from patients where height>160 and weight>70

select first_name,last_name,allergies  from patients
where allergies not NULL and city = 'Hamilton'

select category_name,description from categories order by category_name;

SELECT contact_name, address, city
FROM customers
WHERE Country NOT IN ('Germany','Mexico', 'Spain')

select order_date,shipped_date,customer_id,freight from orders 
where order_date ='2018-02-26'  

select employee_id,order_id,customer_id,required_date,shipped_date
from orders where shipped_date > required_date

select order_id from orders where order_id%2=0
select order_id from orders where mod(order_id,2)=0

select city,company_name,contact_name from customers 
where city like '%L%' order by contact_name 

select company_name,contact_name,fax 
from customers where fax is NOT NULL

Q) Show the first_name, last_name. hire_date of the most recently hired employee.
Solution
SELECT 
    first_name,
    last_name,
    MAX(hire_date) AS hire_date
  FROM employees

Q)Show the average unit price rounded to 2 decimal places, the total units in stock, total discontinued products from the products table.
SELECT round(avg(Unit_Price), 2) AS average_price,
SUM(units_in_stock) AS total_stock,
SUM(discontinued) as total_discontinued
FROM products;


-- Select the most recent record by id to display it.
select * from patients
	where patient_id = (select max(patient_id) from patients);

------------------------------------
Topic:FILTERING
Operators: AND,OR,NOT
ORDER BY ASC|DESC
LIKE %, _
IN, NOT IN
BETWEEN AND
JOIN: INNER,LEFT,FULL OUTER
UNION,UNION ALL(Duplicate)
GROUP BY
HAVING (with aggregates)
CASE

SELECT patient_id, height,
  CASE
      WHEN height > 175 THEN 'height is greater than 175'
      WHEN height = 175 THEN 'height is 175'
      ELSE 'height is under 175'
  END AS height_group
  FROM patients;

The following SQL will order the patients by allergies. However, if allergies is NULL, then order by patient_id:

SELECT patient_id, first_name, allergies
  FROM patients
  ORDER BY
  (CASE
      WHEN allergies IS NULL THEN first_name
      ELSE allergies
  END);

DISTINCT
SELECT COUNT(DISTINCT first_name) FROM patients;

EXISTS
-> SQL statement returns all patients which was diagnosed with pregnancy.

SELECT * FROM patients 
  WHERE EXISTS (SELECT diagnosis FROM admissions 
      WHERE patients.patient_id = admissions.patient_id 
      AND diagnosis = 'Pregnancy')

-> SQL statement can be written more efficently:

SELECT * FROM patients 
  JOIN admissions ON patients.patient_id = admissions.patient_id
  WHERE diagnosis = 'Pregnancy'


ANY, ALL
IFNULL(), ISNULL(), COALESCE(), and NVL() Functions
MySQL: IFNULL() function lets you return an alternative value if an expression is NULL:

SELECT first_name, IFNULL(allergies,'none') AS allergies 
FROM patients

or 

SELECT first_name, COALESCE(allergies,'none') AS allergies 
FROM patients

SQL Server: ISNULL() function lets you return an alternative value when an expression is NULL:

SELECT first_name, IFNULL(allergies,'none') AS allergies 
FROM patients

MS Access: IsNull() function returns TRUE (1) if the expression is a null value, otherwise FALSE (0):

SELECT first_name, IIF(ISNULL(allergies,0),allergies) AS allergies 
FROM patients

Oracle: NVL() function achieves the same result:

SELECT first_name, NVL(allergies,'none') AS allergies 
FROM patients

IS NULL, IS NOT NULL
ALIASES: FOR COLUMN, TABLE: AS KEYWORD
-----------------------------------
FUNCTIONS:
1.AGGREGATE FUNCTIONS: MIN(),MAX(),SUM(),AVG(),COUNT()
2.STRING FUNCTIONS: CONCAT(),LEN(),UPPER(),LOWER()
3.NUMERIC: 	3.1 RAND(),
		3.2 ROUND(): Round(number, decimAls): : SELECT ROUND(135.375, 2); O/P:135.38  ,
		3.3 FLOOR(): ROUNDED DOWN :: SELECT FLOOR(25.9); O/P: 25  ,
		3.4 CEIL(): ROUNDED UP :: SELECT CEIL(25.1); O/P:26
		3.5. MATH:
			3.5.1 ABS : SELECT ABS(-362.3); O/P: 362.3
			3.5.2 POWER: POWER(base, exponent)::  SELECT POWER(8, 3); O/P:512
			3.5.3 SQRT : SELECT SQRT(16); O/P:4
4.DATE FUNCTIONS:
		4.1 YEAR(): SELECT year(current_timestamp)
		4.2 MONTH(): SELECT MONTH(current_timestamp)
		4.3 DAY() : SELECT DAY(current_timestamp)
		4.4 CURRENT_TIMESTAMP function returns the current date and time as "YYYY-MM-DD HH-MM-SS" (string)
			SELECT CURRENT_TIMESTAMP;

5. WINDOW FUNCTIONS: 

SQL window function types:
5.1.Value window functions

			FIRST_VALUE()
			LAST_VALUE()
			LAG():PREVIOUS: Lag(expression [, offset])  
				EX:     select patient_id,first_name,
					  lag(first_name, 1) over() as previous_name
					from patients
					O/P:TABLE
					patient_id  first_name  previous_name
						1	Donald	NULL
						2	Mickey	Donald
						3	Jiji	Mickey
						4	Blair	Jiji
			LEAD(): NEXT: Lead(expression [, offset])
				select patient_id,first_name,
					  lead(first_name, 1) over() as next_name
					from patients
				O/P:TABLE
					patient_id  first_name  next_name
						1	Donald	Mickey
						2	Mickey	Jiji
						3	Jiji	Blair
						4	Blair	Charles
						5	Charles	 Sue
5.2 Ranking window functions

			CUME_DIST()
			DENSE_RANK()
			NTILE()
			PERCENT_RANK()
			RANK()
			ROW_NUMBER()
5.3 Aggregate window functions

			AVG() EXAMPLE: AVG() AS WINDOW FUNCTION
					SELECT 
					    first_name,
					    last_name,
					    weight,
					    AVG(weight) OVER() as avg_weight
					FROM
					    patients;
			COUNT()
			MAX()
			MIN()
			SUM()


WINDOW FUNCTION RESULT: FILTERING " WITH " KEYWORD . CANT USE WHERE OR HAVING CLAUSE
 To filter by the column you must separate the results as a table using the WITH keyword.

with rolling_sum_table as (
    select
      patient_id,
      first_name,
      weight,
      sum(weight) over(order by patient_id) as rolling_sum
    from patients
  )
SELECT *
from rolling_sum_table
where rolling_sum < 1000

-------------------------------
TABLE

ALTER- ADD, DROP,MODIFY/ALTER COLUMNS & ALSO CONSTARINTS OF EXISTING TABLE
ADD COLUMN		-> ALTER TABLE table_name ADD column_name datatype;
DROP COLUMN		-> ALTER TABLE table_name DROP COLUMN column_name;
CHANGE DATATYPE:	SQL Server / MS Access: ALTER TABLE table_name ALTER COLUMN column_name datatype;
			My SQL / Oracle: 	ALTER TABLE table_name MODIFY COLUMN column_name datatype;



CONSTRAINTS:
NOT NULL - Ensures that a column cannot have a NULL value
UNIQUE - Ensures that all values in a column are different
PRIMARY KEY - A combination of a NOT NULL and UNIQUE. Uniquely identifies each row in a table
FOREIGN KEY - Prevents actions that would destroy links between tables
CHECK - Ensures that the values in a column satisfies a specific condition
DEFAULT - Sets a default value for a column if no value is specified

CONSTRAINT UC_Person UNIQUE (ID,LastName)
ALTER TABLE Persons ADD CONSTRAINT UC_Person UNIQUE (ID,LastName);
ALTER TABLE Persons DROP CONSTRAINT UC_Person UNIQUE (ID,LastName);

--------------------------------------
SELECT * FROM patients
select distinct year(birth_date) as birth_year from patients 
order by YEAR(birth_date) asc 

select first_name from patients group by first_name having count(first_name)=1

select patient_id,first_name from patients where first_name like 's__%__s'
SELECT
  patient_id,
  first_name
FROM patients
WHERE
  first_name LIKE 's%s'
  AND len(first_name) >= 6;
  
  
 select p.patient_id,p.first_name,p.last_name from patients p join admissions a
on p.patient_id = a.patient_id where a.diagnosis = 'Dementia'
  
  SELECT
  patient_id,
  first_name,
  last_name
FROM patients
WHERE patient_id IN (
    SELECT patient_id
    FROM admissions
    WHERE diagnosis = 'Dementia'
  );
  
  
  select first_name from patients order by len(first_name),first_name
  
  --------------------------------------8/1/2024---------------------------
Q) Show the total amount of male patients and the total amount of female patients in the patients table.
Display the two results in the same row.

SELECT 
(select count(*)  from patients where gender= 'M') as male_count,
(select count(*) from patients where gender= 'F') as female_count;

select
sum(gender='M') as male_count,
sum(gender='F') as female_count from patients;

select
sum(case when gender='M' Then 1 END) as male_count,
sum(case when gender='F' Then 1 END) as female_count from patients;


select first_name,last_name,allergies from patients 
where allergies IN ('Penicillin','Morphine') 
order by allergies,first_name,last_name

Q)Show patient_id, diagnosis from admissions. Find patients admitted multiple times for the same diagnosis.
select patient_id,diagnosis from admissions 
group by patient_id,diagnosis having count(*)>1

select city, count(patient_id) as num_of_patients from patients 
group by city order by num_of_patients desc , city asc

Q) Show first name, last name and role of every person that is either patient or doctor.
The roles are either "Patient" or "Doctor"
select first_name,last_name, 'Patient' as role from patients
Union all
select first_name,last_name, 'Doctor' as role  from doctors;

Q)Show all allergies ordered by popularity. Remove NULL values from query.
select allergies, COUNT(*) AS total_diagnosis from patients 
where allergies not null 
group by allergies order by total_diagnosis desc

Q)Show all patient's first_name, last_name, and birth_date who were born in the 1970s decade. Sort the list starting from the earliest birth_date.

select first_name,last_name,birth_date from patients 
where year(birth_date) between 1970 and 1979 order by birth_date asc 

SELECT
  first_name,
  last_name,
  birth_date
FROM patients
WHERE year(birth_date) LIKE '197%'
ORDER BY birth_date ASC

SELECT
  first_name,
  last_name,
  birth_date
FROM patients
WHERE
  birth_date >= '1970-01-01'
  AND birth_date < '1980-01-01'
ORDER BY birth_date ASC
Q)We want to display each patient's full name in a single column. Their last_name in all upper letters must appear first, then first_name in all lower case letters. Separate the last_name and first_name with a comma. Order the list by the first_name in decending order
EX: SMITH,jane

select concat(upper(last_name),',',lower(first_name)) as new_name_format from patients
order by first_name desc

SELECT
  UPPER(last_name) || ',' || LOWER(first_name) AS new_name_format
FROM patients
ORDER BY first_name DESC;

select province_id,sum(height) as tot_height from patients  group by province_id
having tot_height >= 7000
  
select (max(weight)-min(weight)) as weight_difference 
from patients where last_name='Maroni

Q)Show all of the days of the month (1-31) and how many admission_dates occurred on that day.
Sort by the day with most admissions to least admissions.

select day(admission_date) as daynum,count(*) as admissions_cnt from admissions
group by daynum order by admissions_cnt desc

Q)Show all columns for patient_id 542's most recent admission_date.
select * from admissions where patient_id=542 
group by patient_id having max(admission_date)

SELECT *
FROM admissions
WHERE patient_id = 542
ORDER BY admission_date DESC
LIMIT 1

SELECT *
FROM admissions
WHERE
  patient_id = '542'
  AND admission_date = (
    SELECT MAX(admission_date)
    FROM admissions
    WHERE patient_id = '542'
  )

Q)Show patient_id, attending_doctor_id, and diagnosis for admissions that match one of the two criteria:
1. patient_id is an odd number and attending_doctor_id is either 1, 5, or 19.
2. attending_doctor_id contains a 2 and the length of patient_id is 3 characters.

select patient_id,attending_doctor_id,diagnosis from admissions 
where patient_id%2=1 and attending_doctor_id in (1,5,19)
OR len(patient_id)=3 and attending_doctor_id like '%2%'

Q)Show first_name, last_name, and the total number of admissions attended for each doctor.

Every admission has been attended by a doctor.
select first_name,last_name,count(*) tot_admissions 
from admissions join doctors 
on admissions.attending_doctor_id=doctors.doctor_id
group by doctors.doctor_id


Q)For each doctor, display their id, full name, and the first and last admission date they attended.
select d.doctor_id,concat(d.first_name,' ',d.last_name) as full_name,
MIN(admission_date) as first_admission ,Max(admission_date) as last_admission
from doctors d join admissions a 
on a.attending_doctor_id=d.doctor_id  group by d.doctor_id

Q)Display the total amount of patients for each province. Order by descending.
select pn.province_name ,count(*) as patient_cnt 
from patients p join province_names pn
on p.province_id=pn.province_id 
group by pn.province_name order by patient_cnt desc


Q)For every admission, display the patient's full name, their admission diagnosis, and their doctor's full name
who diagnosed their problem.

select p.first_name|| ' ' || p.last_name as patient_name,
a.diagnosis ,d.first_name|| ' ' || d.last_name as doctor_name
from patients p 
join admissions a on p.patient_id=a.patient_id  
join doctors d on a.attending_doctor_id=d.doctor_id

Q)display the first name, last name and number of duplicate patients based on their first name and last name.

Ex: A patient with an identical name can be considered a duplicate.
select first_name,last_name,count(*) Noof_duplicate_patients from patients
group by first_name,last_name
having  count(*)>1

Q)Display patient's full name,
height in the units feet rounded to 1 decimal,
weight in the unit pounds rounded to 0 decimals,
birth_date,
gender non abbreviated.

Convert CM to feet by dividing by 30.48.
Convert KG to pounds by multiplying by 2.205.
select concat(first_name,' ',last_name) as full_name,
Round(height/30.48,1) as height_units,Round(weight*2.205,0) as weight_pounds,birth_date,
(case when gender='M' then 'MALE' else 'FEMALE' end) gender_type
from patients;

Q)Show patient_id, first_name, last_name from patients whose does not have any records in the admissions table. 
select patient_id,first_name,last_name from patients  where patient_id 
not in (select patient_id from admissions)

SELECT
  patients.patient_id,
  first_name,
  last_name
from patients
  left join admissions on patients.patient_id = admissions.patient_id
where admissions.patient_id is NULL


select product_name,company_name,category_name from 
categories c Join products p on c.category_id=p.category_id
join suppliers s on p.supplier_id = s.supplier_id

Q)Show the category_name and the average product unit price for each category rounded to 2 decimal places.
select category_name,Round (avg(unit_price),2) avg_unit_price 
from categories c join products p
on c.category_id=p.category_id group by category_name
  
  
  
  SELECT 
(select count(*)  from patients where gender= 'M') as male_count,
(select count(*) from patients where gender= 'F') as female_count;

select
sum(gender='M') as male_count,
sum(gender='F') as female_count from patients;

select
sum(case when gender='M' Then 1 END) as male_count,
sum(case when gender='F' Then 1 END) as female_count from patients;

select first_name,last_name,allergies from patients 
where allergies IN ('Penicillin','Morphine') 
order by allergies,first_name,last_name

select patient_id,diagnosis from admissions 
group by patient_id,diagnosis having count(*)>1

select * from patients
select city, count(patient_id) as num_of_patients from patients 
group by city order by num_of_patients desc , city asc

select first_name,last_name, 'Patient' as role from patients
Union all
select first_name,last_name, 'Doctor' as role  from doctors;


select allergies, COUNT(*) AS total_diagnosis from patients 
where allergies not null 
group by allergies order by total_diagnosis desc

select first_name,last_name,birth_date from patients 
where year(birth_date) between 1970 and 1979 order by birth_date asc 

SELECT
  first_name,
  last_name,
  birth_date
FROM patients
WHERE year(birth_date) LIKE '197%'
ORDER BY birth_date ASC

SELECT
  first_name,
  last_name,
  birth_date
FROM patients
WHERE
  birth_date >= '1970-01-01'
  AND birth_date < '1980-01-01'
ORDER BY birth_date ASC

select concat(upper(last_name),',',lower(first_name)) as new_name_format from patients
order by first_name desc

SELECT
  UPPER(last_name) || ',' || LOWER(first_name) AS new_name_format
FROM patients
ORDER BY first_name DESC;

select province_id,sum(height) as tot_height from patients  group by province_id
having tot_height >= 7000
  
select * from patients
select (max(weight)-min(weight)) as weight_difference 
from patients where last_name='Maroni'

select day(admission_date) as daynum,count(*) as admissions_cnt from admissions
group by daynum order by admissions_cnt desc

select * from admissions where patient_id=542 
group by patient_id having max(admission_date)

select patient_id,attending_doctor_id,diagnosis from admissions 
where patient_id%2=1 and attending_doctor_id in (1,5,19)
OR len(patient_id)=3 and attending_doctor_id like '%2%'


select first_name,last_name,count(*) tot_admissions 
from admissions join doctors 
on admissions.attending_doctor_id=doctors.doctor_id
group by doctors.doctor_id

select d.doctor_id,concat(d.first_name,' ',d.last_name) as full_name,
MIN(admission_date) as first_admission ,Max(admission_date) as last_admission
from doctors d join admissions a 
on a.attending_doctor_id=d.doctor_id  group by d.doctor_id

select pn.province_name ,count(*) as patient_cnt 
from patients p join province_names pn
on p.province_id=pn.province_id 
group by pn.province_name order by patient_cnt desc

select p.first_name|| ' ' || p.last_name as patient_name,
a.diagnosis ,d.first_name|| ' ' || d.last_name as doctor_name
from patients p 
join admissions a on p.patient_id=a.patient_id  
join doctors d on a.attending_doctor_id=d.doctor_id

select first_name,last_name,count(*) Noof_duplicate_patients from patients
group by first_name,last_name
having  count(*)>1

select * from patients;
select concat(first_name,' ',last_name) as full_name,
Round(height/30.48,1) as height_units,Round(weight*2.205,0) as weight_pounds,birth_date,
(case when gender='M' then 'MALE' else 'FEMALE' end) gender_type
from patients;

select patient_id,first_name,last_name from patients  where patient_id 
not in (select patient_id from admissions)


select product_name,company_name,category_name from 
categories c Join products p on c.category_id=p.category_id
join suppliers s on p.supplier_id = s.supplier_id

select category_name,Round (avg(unit_price),2) avg_unit_price 
from categories c join products p
on c.category_id=p.category_id group by category_name

Q)Show the city, company_name, contact_name from the customers and suppliers table merged together.
Create a column which contains 'customers' or 'suppliers' depending on the table it came from.

select city,company_name,contact_name,'customers' as relationship
from customers
union
select city,company_name,contact_name,'suppliers' as relationship
from suppliers










  
  
  
  





















